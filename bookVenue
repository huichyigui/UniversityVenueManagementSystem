#!/bin/bash
.  bookValidation
.  venueValidation

#constants
declare -r TRUE=0
declare -r FALSE=1

#variables
break=0
venue=./venue.txt
booking=./booking.txt
sid=$1
sname=$2
current_timestamp=$(date +%s)
finaldate=0
finalstaffID="$sid"

rNumValid=$FALSE
dateValid=$FALSE
dateOneDayBefore=$FALSE
timeFromValid=$FALSE
timeToValid=$FALSE
timeToFromValid=$FALSE
bookingValid=$FALSE
reasonValid=$FALSE

# Formatting
startUnderline=$(tput smul)
endUnderline=$(tput rmul)
RED="\e[31m"
GREEN="\e[32m"
ENDCOLOR="\e[0m"
bold=$(tput bold)
normal=$(tput sgr0)
YEL="\e[1;33m"

function validateTimeToFrom() {
    t1=$(date -u -d "$1" +"%s")
    t2=$(date -u -d "$2" +"%s")
    if [ $((t2-t1)) -lt 3600 ]; then
        echo 1
    else
        echo 0
    fi
}


#Generate venue receipt
function generateReceipt() {
local sid="$1"
local sname="$2"
local roomNum="$3"
local bookingDate="$4"
local timeFrom="$5"
local timeTo="$6"
local reason="$7"
bDate=$(date -d "$bookingDate" +"%m/%d/%Y")
date=$(date -d "$bDate" +"%d-%m-%Y")
today=$(date +"%m/%d/%Y %I:%M %p")
filename=./$1_$3_$date.txt

receipt_text="Venue Booking Receipt

Staff ID: $sid           Staff Name: $sname

Room Number: $roomNum

Date Booking: $bookingDate

Time From: $timeFrom           Time To: $timeTo

Reason for Booking: $reason


This is a computer generated receipt with no signature required.

Printed on $today."

touch $filename
echo "$receipt_text" > $filename
echo -e "\n${GREEN}Receipt saved to $filename.${ENDCOLOR}"
}

clear

source ./textCenter
redraw "${bold}${startUnderline}Book Venue Screen${endUnderline}${normal}"
echo

while [ "$break" -lt 1 ]; do
    #Retrieve available room list
    echo "Available Room:"
    echo "+----------+--------+--------------+--------+---------------------------------+------------+"
    echo -e "|Block Name|${YEL}Room Num${ENDCOLOR}|Room Type     |Capacity|            Remarks              |Availability|"
    echo "+----------+--------+--------------+--------+---------------------------------+------------+"
    awk -F: '$6=="Available" {printf("|%-10s|%-8s|%-14s|%-8s|%-33s|%-12s|\n", $1, $2, $3, $4, $5, $6)}' venue.txt
    echo "+----------+--------+--------------+--------+---------------------------------+------------+"
    echo
    while [ $rNumValid -eq 1 ]; do
        read -p "Enter Room Number (eg: SG001): " rNum    
        rNum=${rNum^^}
        rNumValid=$(isrNumValid "$rNum") 
        searchVenue="$rNum"
        
        if [ "$rNumValid" -eq 1 ]; then
            echo -e "\n${RED}Invalid Room Number input. Do try again.${ENDCOLOR}\n"
        elif grep -q "$rNum" "$venue"; then
            while IFS=: read -r bname rnum rtype capacity remarks availability
            do
                if [ "$rNum" == "$rnum" ]; then
                    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
                    echo -e "\n\tRoom Type (auto display)      : ${startUnderline}$rtype${endUnderline}"
                    echo -e "\tCapacity (auto display)       : ${startUnderline}$capacity${endUnderline}"
                    echo -e "\tRemarks (auto display)        : ${startUnderline}$remarks${endUnderline}"
                    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
                fi
            done < $venue    
        else
            rNumValid=$FALSE
            echo -e "\n${RED}Room Number [$rNum] does not exist.${ENDCOLOR}\n"
        fi
    done
    
    echo -e "\nPlease ${bold}enter${normal} the following details: "
    echo -e "***Note: The booking date should be 1 day in advance."
    echo
    # Read Date Booking
    bookingValid=1
    found_conflict=0
    finaldate=0
    
    while [ "$bookingValid" -eq 1 ]; do
    
        while [ "$dateValid" -eq 1 ]; do
    	read -p "Date Booking (mm/dd/yyyy)"$'\t:' date
    	finaldate="$date"
    	dateValid=$(isDateValid "$date")
    	tomorrow=$(date -d "tomorrow" +"%m/%d/%Y")
    	min_date=$(date -d "+1 day" +%m/%d/%Y)
   
    	if [ "$dateValid" -eq 1 ]; then
        	echo -e "\n${RED}Invalid Date Booking input. FORMAT [mm/dd/yyyy]. Do try again.${ENDCOLOR}\n"
        elif [[ "$finaldate" < "$min_date" ]]; then
    		echo -e "\n${RED}The date booking should be 1 day in advance (expected: $tomorrow).${ENDCOLOR}\n"
    		dateValid=1
    	elif [[ "$min_date" < "$finaldate" ]]; then
    		dateValid=0
  	fi
  	
	done
    
        # Read Time From
        while [ "$timeFromValid" -eq 1 ]; do
    		read -p "Time From (hh:mm)"$'\t\t:' timeFrom
    		timeFromValid=$(isTimeValid "$timeFrom")

    		if [ "$timeFromValid" -eq 1 ]; then
        		echo -e "\n${RED}Please enter valid Time From in 24-hour clock time.${ENDCOLOR}\n"
    		fi
	done

    
        # Read Time To
        while [ "$timeToValid" -eq 1 -o "$timeToFromValid" -eq 1 ]; do
            read -p "Time To (hh:mm)"$'\t\t\t:' timeTo
            timeToValid=$(isTimeValid "$timeTo")

            if [ "$timeToValid" -eq 1 ]; then
                echo -e "\n${RED}Please enter valid Time From in 24-hour cloud time.${ENDCOLOR}\n"
            else
                timeToFromValid=$(validateTimeToFrom "$timeFrom" "$timeTo")

                if [[ "$timeToFromValid" -eq 1 ]]; then
                    echo -e "\n${RED}Time To must at least one hour after Time From.${ENDCOLOR}\n"
                fi
            fi
        done
        
	#Check overlapping
	file="booking.txt"
	searchTimeFrom="$timeFrom"
	searchTimeTo="$timeTo"
	searchterm="$searchVenue-$finaldate"
	found_conflict=0
	if grep -q "$searchterm" booking.txt; then
		while IFS='-' read -r sid staff venue date timefrom timeto remarks; do  		
			inputtedDate="$finaldate"
    			if [[ "$venue" == "$searchVenue" && "$date" == "$inputtedDate" ]]; then
    				# Convert time values to seconds since midnight
    				timefrom_sec=$(date -d "$date $timefrom" +"%s")
    				timeto_sec=$(date -d "$date $timeto" +"%s")
    				searchTimeFrom_sec=$(date -d "$date $searchTimeFrom" +"%s")
    				searchTimeTo_sec=$(date -d "$date $searchTimeTo" +"%s")	
				if [ "$timefrom_sec" -lt "$searchTimeTo_sec" ] && \
       		   		[ "$searchTimeFrom_sec" -lt "$timeto_sec" ]; then
       		   			echo -e "\nExisting timeslot found: $timefrom -> $timeto."
					echo -e "${RED}Your preferred venue time slot has been taken. Please try a new time slot.${ENDCOLOR}"
					found_conflict=1
					break
				
				fi
   		
    			fi		
		done < "$file"	
	else		
		found_conflict=0		
	fi	
	
	if [ "$found_conflict" = "0" ]; then
    		bookingValid=0
    		echo -e "\n${GREEN}Venue time configured successfully.${ENDCOLOR}\n"
    	else
    	found_conflict=0
    	timeFromValid=1
    	timeToValid=1
    	timeToFromValid=1
    	bookingValid=1
    	
  fi
    done
    
    # Read Reason
    while [ "$reasonValid" -eq 1 ]; do
        read -p "Reason for Booking (Max: 30 words) Press ENTER to skip: " reason
        
        if [ -z "$reason" ]; then
            reason="N/A"
        fi
        
        reasonValid=$(isRemarksValid "$reason")            
        if [ "$reasonValid" -eq 1 ]; then
            echo -e "\n${RED}Reason too long. Do try again.${ENDCOLOR}\n"
        fi
    done
    
    # Confirmation
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
    echo -e "\n\tStaff ID       : $finalstaffID"
    echo -e "\tStaff Name     : $sname"
    echo -e "\tRoom Number    : $rNum"
    echo -e "\tDate Booking   : $finaldate"
    echo -e "\tTime From      : $timeFrom"
    echo -e "\tTime To        : $timeTo"
    echo -e "\tReason Booking : $reason\n"
    
    input1=0
    until [ "$input1" -eq 1 ]; do
        read -p "Confirm details? Press (y)es to save or (n)o to discard > " save
        
        case "$save" in
        [Yy]) 
            input1=1
            echo "$finalstaffID-$sname-$rNum-$finaldate-$timeFrom-$timeTo-$reason" >> $booking
            echo "Saving..."
            sleep 1
            echo -e "\n${GREEN}Venue booked successfully.${ENDCOLOR}\n"
            generateReceipt $finalstaffID "$sname" $rNum $finaldate $timeFrom $timeTo $reason
            ;;   
        [Nn])
            input1=1;;
        *) echo -e "\n${RED}Invalid choice input. Do try again.${ENDCOLOR}\n"
        esac    
    done
    
    #Loop in add another venue
    input2=0
    until [ "$input2" -eq 1 ]; do
        echo
        read -p "Book Another Venue? (y)es or (q)uit: " choice
        echo -e "\nPress (q) to return to ${bold}University Venue${normal} Management Menu"
        
        case "$choice" in
        [Yy])
            input2=1
            clear
            rNumValid=$FALSE
            dateValid=$FALSE
            dateOneDayBefore=$FALSE
            timeFromValid=$FALSE
            timeToValid=$FALSE
            timeToFromValid=$FALSE
            bookingValid=$FALSE;;
        [Qq])
            input2=1
            break=1
            bash mainMenu;;
        *) echo -e "\n${RED}Invalid choice input. Do try again.${normal}\n"
        esac
    done
done
